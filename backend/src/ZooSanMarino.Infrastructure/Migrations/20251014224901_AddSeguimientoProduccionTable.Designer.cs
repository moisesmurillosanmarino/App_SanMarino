// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZooSanMarino.Infrastructure.Persistence;

#nullable disable

namespace ZooSanMarino.Infrastructure.Migrations
{
    [DbContext(typeof(ZooSanMarinoContext))]
    [Migration("20251014224901_AddSeguimientoProduccionTable")]
    partial class AddSeguimientoProduccionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("codigo");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<JsonDocument>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nombre");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_catalogo_items");

                    b.HasIndex("Activo")
                        .HasDatabaseName("ix_catalogo_items_activo");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("ux_catalogo_items_codigo");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("ix_catalogo_items_nombre");

                    b.ToTable("catalogo_items", "public");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("country");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document_type");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("identifier");

                    b.Property<bool>("MobileAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("mobile_access");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("state");

                    b.PrimitiveCollection<string[]>("VisualPermissions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("visual_permissions");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("Identifier")
                        .HasDatabaseName("ix_companies_identifier");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("DepartamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartamentoId"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<string>("DepartamentoNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("departamento_nombre");

                    b.Property<int>("PaisId")
                        .HasColumnType("integer")
                        .HasColumnName("pais_id");

                    b.HasKey("DepartamentoId")
                        .HasName("pk_departamento");

                    b.HasIndex("PaisId", "DepartamentoNombre")
                        .IsUnique()
                        .HasDatabaseName("ux_departamentos_pais_nombre");

                    b.ToTable("departamentos", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Farm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("integer")
                        .HasColumnName("municipio_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int?>("RegionalId")
                        .HasColumnType("integer")
                        .HasColumnName("regional_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("A")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id")
                        .HasName("pk_farms");

                    b.HasIndex("DepartamentoId")
                        .HasDatabaseName("ix_farms_departamento_id");

                    b.HasIndex("MunicipioId")
                        .HasDatabaseName("ix_farms_municipio_id");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ux_farms_company_name");

                    b.ToTable("farms", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.FarmInventoryMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogItemId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_item_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("FarmId")
                        .HasColumnType("integer")
                        .HasColumnName("farm_id");

                    b.Property<JsonDocument>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("movement_type");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("quantity");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("reason");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reference");

                    b.Property<string>("ResponsibleUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("responsible_user_id");

                    b.Property<Guid?>("TransferGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("transfer_group_id");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("kg")
                        .HasColumnName("unit");

                    b.HasKey("Id")
                        .HasName("pk_farm_inventory_movements");

                    b.HasIndex("CatalogItemId")
                        .HasDatabaseName("ix_farm_inventory_movements_catalog_item_id");

                    b.HasIndex("MovementType")
                        .HasDatabaseName("ix_fim_type");

                    b.HasIndex("TransferGroupId")
                        .HasDatabaseName("ix_fim_transfer_group");

                    b.HasIndex("FarmId", "CatalogItemId")
                        .HasDatabaseName("ix_fim_farm_item");

                    b.ToTable("farm_inventory_movements", "public");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.FarmProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("CatalogItemId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_item_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<int>("FarmId")
                        .HasColumnType("integer")
                        .HasColumnName("farm_id");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("LotNumber")
                        .HasColumnType("text")
                        .HasColumnName("lot_number");

                    b.Property<JsonDocument>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<string>("ResponsibleUserId")
                        .HasColumnType("text")
                        .HasColumnName("responsible_user_id");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unit");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_cost");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_farm_product_inventory");

                    b.HasIndex("CatalogItemId")
                        .HasDatabaseName("ix_farm_product_inventory_catalog_item_id");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_farm_product_inventory_farm_id");

                    b.ToTable("farm_product_inventory", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Galpon", b =>
                {
                    b.Property<string>("GalponId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("galpon_id");

                    b.Property<string>("Ancho")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("ancho");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("GalponNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("galpon_nombre");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_id");

                    b.Property<string>("Largo")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("largo");

                    b.Property<string>("NucleoId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("nucleo_id");

                    b.Property<string>("TipoGalpon")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo_galpon");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("GalponId")
                        .HasName("pk_galpones");

                    b.HasIndex("GalponNombre")
                        .HasDatabaseName("ix_galpon_nombre");

                    b.HasIndex("CompanyId", "GalponId")
                        .IsUnique()
                        .HasDatabaseName("ux_galpon_company_galpon");

                    b.HasIndex("GranjaId", "NucleoId")
                        .HasDatabaseName("ix_galpon_granja_nucleo");

                    b.HasIndex("NucleoId", "GranjaId")
                        .HasDatabaseName("ix_galpones_nucleo_id_granja_id");

                    b.ToTable("galpones", "public");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.HistorialInventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadHembrasAnterior")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_hembras_anterior");

                    b.Property<int>("CantidadHembrasNueva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_hembras_nueva");

                    b.Property<int>("CantidadMachosAnterior")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_machos_anterior");

                    b.Property<int>("CantidadMachosNueva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_machos_nueva");

                    b.Property<int>("CantidadMixtasAnterior")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_mixtas_anterior");

                    b.Property<int>("CantidadMixtasNueva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_mixtas_nueva");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("FechaCambio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cambio");

                    b.Property<string>("GalponId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("galpon_id");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_id");

                    b.Property<int>("InventarioId")
                        .HasColumnType("integer")
                        .HasColumnName("inventario_id");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    b.Property<string>("Motivo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("motivo");

                    b.Property<int?>("MovimientoId")
                        .HasColumnType("integer")
                        .HasColumnName("movimiento_id");

                    b.Property<string>("NucleoId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nucleo_id");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observaciones");

                    b.Property<string>("TipoCambio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo_cambio");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.Property<int>("UsuarioCambioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_cambio_id");

                    b.Property<string>("UsuarioNombre")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("usuario_nombre");

                    b.HasKey("Id")
                        .HasName("pk_historial_inventario");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_historial_inventario_company_id");

                    b.HasIndex("FechaCambio")
                        .HasDatabaseName("ix_historial_inventario_fecha_cambio");

                    b.HasIndex("GalponId")
                        .HasDatabaseName("ix_historial_inventario_galpon_id");

                    b.HasIndex("InventarioId")
                        .HasDatabaseName("ix_historial_inventario_inventario_id");

                    b.HasIndex("LoteId")
                        .HasDatabaseName("ix_historial_inventario_lote_id");

                    b.HasIndex("MovimientoId")
                        .HasDatabaseName("ix_historial_inventario_movimiento_id");

                    b.HasIndex("TipoCambio")
                        .HasDatabaseName("ix_historial_inventario_tipo_cambio");

                    b.HasIndex("UsuarioCambioId")
                        .HasDatabaseName("ix_historial_inventario_usuario_cambio_id");

                    b.HasIndex("NucleoId", "GranjaId")
                        .HasDatabaseName("ix_historial_inventario_nucleo_id_granja_id");

                    b.HasIndex("GranjaId", "NucleoId", "GalponId")
                        .HasDatabaseName("ix_historial_inventario_ubicacion");

                    b.ToTable("historial_inventario", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.InventarioAves", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadHembras")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_hembras");

                    b.Property<int>("CantidadMachos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_machos");

                    b.Property<int>("CantidadMixtas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_mixtas");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Activo")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<string>("GalponId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("galpon_id");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_id");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    b.Property<string>("NucleoId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nucleo_id");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observaciones");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id")
                        .HasName("pk_inventario_aves");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_inventario_aves_company_id");

                    b.HasIndex("Estado")
                        .HasDatabaseName("ix_inventario_aves_estado");

                    b.HasIndex("FechaActualizacion")
                        .HasDatabaseName("ix_inventario_aves_fecha_actualizacion");

                    b.HasIndex("GalponId")
                        .HasDatabaseName("ix_inventario_aves_galpon_id");

                    b.HasIndex("LoteId")
                        .HasDatabaseName("ix_inventario_aves_lote_id");

                    b.HasIndex("NucleoId", "GranjaId")
                        .HasDatabaseName("ix_inventario_aves_nucleo_id_granja_id");

                    b.HasIndex("GranjaId", "NucleoId", "GalponId")
                        .HasDatabaseName("ix_inventario_aves_ubicacion");

                    b.HasIndex("LoteId", "GranjaId", "NucleoId", "GalponId", "CompanyId")
                        .IsUnique()
                        .HasDatabaseName("uq_inventario_aves_lote_ubicacion_company")
                        .HasFilter("deleted_at IS NULL");

                    b.ToTable("inventario_aves", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Login", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEmailLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_email_login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.HasKey("Id")
                        .HasName("pk_logins");

                    b.ToTable("logins", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Lote", b =>
                {
                    b.Property<int>("LoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LoteId"));

                    b.Property<int?>("AnoTablaGenetica")
                        .HasColumnType("integer")
                        .HasColumnName("ano_tabla_genetica");

                    b.Property<int?>("AvesEncasetadas")
                        .HasColumnType("integer")
                        .HasColumnName("aves_encasetadas");

                    b.Property<string>("CodigoGuiaGenetica")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("codigo_guia_genetica");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("EdadInicial")
                        .HasColumnType("integer")
                        .HasColumnName("edad_inicial");

                    b.Property<DateTime?>("FechaEncaset")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_encaset");

                    b.Property<string>("GalponId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("galpon_id");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_id");

                    b.Property<int?>("HembrasL")
                        .HasColumnType("integer")
                        .HasColumnName("hembras_l");

                    b.Property<string>("Linea")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("linea");

                    b.Property<int?>("LineaGeneticaId")
                        .HasColumnType("integer")
                        .HasColumnName("linea_genetica_id");

                    b.Property<string>("LoteNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("lote_nombre");

                    b.Property<int?>("MachosL")
                        .HasColumnType("integer")
                        .HasColumnName("machos_l");

                    b.Property<int?>("Mixtas")
                        .HasColumnType("integer")
                        .HasColumnName("mixtas");

                    b.Property<int?>("MortCajaH")
                        .HasColumnType("integer")
                        .HasColumnName("mort_caja_h");

                    b.Property<int?>("MortCajaM")
                        .HasColumnType("integer")
                        .HasColumnName("mort_caja_m");

                    b.Property<string>("NucleoId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("nucleo_id");

                    b.Property<double?>("PesoInicialH")
                        .HasColumnType("double precision")
                        .HasColumnName("peso_inicial_h");

                    b.Property<double?>("PesoInicialM")
                        .HasColumnType("double precision")
                        .HasColumnName("peso_inicial_m");

                    b.Property<double?>("PesoMixto")
                        .HasColumnType("double precision")
                        .HasColumnName("peso_mixto");

                    b.Property<string>("Raza")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("raza");

                    b.Property<string>("Regional")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("regional");

                    b.Property<string>("Tecnico")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("tecnico");

                    b.Property<string>("TipoLinea")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("tipo_linea");

                    b.Property<double?>("UnifH")
                        .HasColumnType("double precision")
                        .HasColumnName("unif_h");

                    b.Property<double?>("UnifM")
                        .HasColumnType("double precision")
                        .HasColumnName("unif_m");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("LoteId")
                        .HasName("pk_lotes");

                    b.HasIndex("GalponId")
                        .HasDatabaseName("ix_lote_galpon");

                    b.HasIndex("GranjaId")
                        .HasDatabaseName("ix_lote_granja");

                    b.HasIndex("NucleoId")
                        .HasDatabaseName("ix_lote_nucleo");

                    b.HasIndex("NucleoId", "GranjaId")
                        .HasDatabaseName("ix_lotes_nucleo_id_granja_id");

                    b.ToTable("lotes", "public", t =>
                        {
                            t.HasCheckConstraint("ck_l_nonneg_counts", "(hembras_l >= 0 OR hembras_l IS NULL) AND (machos_l >= 0 OR machos_l IS NULL) AND (mixtas >= 0 OR mixtas IS NULL) AND (aves_encasetadas >= 0 OR aves_encasetadas IS NULL)");

                            t.HasCheckConstraint("ck_l_nonneg_pesos", "(peso_inicial_h >= 0 OR peso_inicial_h IS NULL) AND (peso_inicial_m >= 0 OR peso_inicial_m IS NULL) AND (peso_mixto >= 0 OR peso_mixto IS NULL)");
                        });
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteGalpon", b =>
                {
                    b.Property<int>("LoteId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    b.Property<string>("ReproductoraId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("reproductora_id");

                    b.Property<string>("GalponId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("galpon_id");

                    b.Property<int?>("H")
                        .HasColumnType("integer")
                        .HasColumnName("h");

                    b.Property<int?>("M")
                        .HasColumnType("integer")
                        .HasColumnName("m");

                    b.HasKey("LoteId", "ReproductoraId", "GalponId")
                        .HasName("pk_lote_galpones");

                    b.HasIndex("GalponId")
                        .HasDatabaseName("ix_lote_galpones_galpon_id");

                    b.ToTable("lote_galpones", "public", t =>
                        {
                            t.HasCheckConstraint("ck_lg_nonneg_counts", "(m >= 0 OR m IS NULL) AND (h >= 0 OR h IS NULL)");
                        });
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteReproductora", b =>
                {
                    b.Property<int>("LoteId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    b.Property<string>("ReproductoraId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("reproductora_id");

                    b.Property<DateTime?>("FechaEncasetamiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_encasetamiento");

                    b.Property<int?>("H")
                        .HasColumnType("integer")
                        .HasColumnName("h");

                    b.Property<int?>("M")
                        .HasColumnType("integer")
                        .HasColumnName("m");

                    b.Property<int?>("Mixtas")
                        .HasColumnType("integer")
                        .HasColumnName("mixtas");

                    b.Property<int?>("MortCajaH")
                        .HasColumnType("integer")
                        .HasColumnName("mort_caja_h");

                    b.Property<int?>("MortCajaM")
                        .HasColumnType("integer")
                        .HasColumnName("mort_caja_m");

                    b.Property<string>("NombreLote")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nombre_lote");

                    b.Property<decimal?>("PesoInicialH")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("peso_inicial_h");

                    b.Property<decimal?>("PesoInicialM")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("peso_inicial_m");

                    b.Property<decimal?>("PesoMixto")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("peso_mixto");

                    b.Property<int?>("UnifH")
                        .HasColumnType("integer")
                        .HasColumnName("unif_h");

                    b.Property<int?>("UnifM")
                        .HasColumnType("integer")
                        .HasColumnName("unif_m");

                    b.HasKey("LoteId", "ReproductoraId")
                        .HasName("pk_lote_reproductoras");

                    b.HasIndex("FechaEncasetamiento")
                        .HasDatabaseName("ix_lote_reproductora_fecha");

                    b.HasIndex("LoteId")
                        .HasDatabaseName("ix_lote_reproductora_lote");

                    b.HasIndex("ReproductoraId")
                        .HasDatabaseName("ix_lote_reproductora_rep");

                    b.ToTable("lote_reproductoras", "public", t =>
                        {
                            t.HasCheckConstraint("ck_lr_nonneg_counts", "(m >= 0 OR m IS NULL) AND (h >= 0 OR h IS NULL) AND (mixtas >= 0 OR mixtas IS NULL)");

                            t.HasCheckConstraint("ck_lr_nonneg_pesos", "(peso_inicial_m >= 0 OR peso_inicial_m IS NULL) AND (peso_inicial_h >= 0 OR peso_inicial_h IS NULL) AND (peso_mixto >= 0 OR peso_mixto IS NULL)");
                        });
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteSeguimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("ConsumoAlimento")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("consumo_alimento");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("ErrorH")
                        .HasColumnType("integer")
                        .HasColumnName("error_h");

                    b.Property<int?>("ErrorM")
                        .HasColumnType("integer")
                        .HasColumnName("error_m");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    b.Property<int?>("MortalidadH")
                        .HasColumnType("integer")
                        .HasColumnName("mortalidad_h");

                    b.Property<int?>("MortalidadM")
                        .HasColumnType("integer")
                        .HasColumnName("mortalidad_m");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observaciones");

                    b.Property<decimal?>("PesoFinal")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("peso_final");

                    b.Property<decimal?>("PesoInicial")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("peso_inicial");

                    b.Property<string>("ReproductoraId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("reproductora_id");

                    b.Property<int?>("SelH")
                        .HasColumnType("integer")
                        .HasColumnName("sel_h");

                    b.Property<int?>("SelM")
                        .HasColumnType("integer")
                        .HasColumnName("sel_m");

                    b.Property<string>("TipoAlimento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_alimento");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id")
                        .HasName("pk_lote_seguimientos");

                    b.HasIndex("LoteId", "ReproductoraId", "Fecha")
                        .HasDatabaseName("ix_ls_lote_rep_fecha");

                    b.ToTable("lote_seguimientos", "public", t =>
                        {
                            t.HasCheckConstraint("ck_ls_nonneg_counts", "(mortalidad_m >= 0 OR mortalidad_m IS NULL) AND (mortalidad_h >= 0 OR mortalidad_h IS NULL) AND (sel_m >= 0 OR sel_m IS NULL) AND (sel_h >= 0 OR sel_h IS NULL)");

                            t.HasCheckConstraint("ck_ls_nonneg_pesos", "(peso_inicial >= 0 OR peso_inicial IS NULL) AND (peso_final >= 0 OR peso_final IS NULL) AND (consumo_alimento >= 0 OR consumo_alimento IS NULL)");
                        });
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.MasterList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_master_lists");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_master_lists_key");

                    b.ToTable("master_lists", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.MasterListOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MasterListId")
                        .HasColumnType("integer")
                        .HasColumnName("master_list_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_master_list_options");

                    b.HasIndex("MasterListId")
                        .HasDatabaseName("ix_master_list_options_master_list_id");

                    b.ToTable("master_list_options", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Icon")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("label");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Route")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("route");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_menus");

                    b.HasIndex("ParentId", "Order")
                        .HasDatabaseName("ix_menus_parent_id_order");

                    b.ToTable("menus", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.MenuPermission", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("MenuId", "PermissionId")
                        .HasName("pk_menu_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_menu_permissions_permission_id");

                    b.ToTable("menu_permissions", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.MovimientoAves", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadHembras")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_hembras");

                    b.Property<int>("CantidadMachos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_machos");

                    b.Property<int>("CantidadMixtas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("cantidad_mixtas");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Pendiente")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaCancelacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cancelacion");

                    b.Property<DateTime>("FechaMovimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_movimiento");

                    b.Property<DateTime?>("FechaProcesamiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_procesamiento");

                    b.Property<string>("GalponDestinoId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("galpon_destino_id");

                    b.Property<string>("GalponOrigenId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("galpon_origen_id");

                    b.Property<int?>("GranjaDestinoId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_destino_id");

                    b.Property<int?>("GranjaOrigenId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_origen_id");

                    b.Property<int?>("InventarioDestinoId")
                        .HasColumnType("integer")
                        .HasColumnName("inventario_destino_id");

                    b.Property<int?>("InventarioOrigenId")
                        .HasColumnType("integer")
                        .HasColumnName("inventario_origen_id");

                    b.Property<int?>("LoteDestinoId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_destino_id");

                    b.Property<int?>("LoteOrigenId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_origen_id");

                    b.Property<string>("MotivoMovimiento")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("motivo_movimiento");

                    b.Property<string>("NucleoDestinoId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nucleo_destino_id");

                    b.Property<string>("NucleoOrigenId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nucleo_origen_id");

                    b.Property<string>("NumeroMovimiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("numero_movimiento");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observaciones");

                    b.Property<string>("TipoMovimiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo_movimiento");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.Property<int>("UsuarioMovimientoId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_movimiento_id");

                    b.Property<string>("UsuarioNombre")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("usuario_nombre");

                    b.HasKey("Id")
                        .HasName("pk_movimiento_aves");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_movimiento_aves_company_id");

                    b.HasIndex("Estado")
                        .HasDatabaseName("ix_movimiento_aves_estado");

                    b.HasIndex("FechaMovimiento")
                        .HasDatabaseName("ix_movimiento_aves_fecha_movimiento");

                    b.HasIndex("GranjaDestinoId")
                        .HasDatabaseName("ix_movimiento_aves_granja_destino_id");

                    b.HasIndex("InventarioDestinoId")
                        .HasDatabaseName("ix_movimiento_aves_inventario_destino_id");

                    b.HasIndex("InventarioOrigenId")
                        .HasDatabaseName("ix_movimiento_aves_inventario_origen_id");

                    b.HasIndex("LoteDestinoId")
                        .HasDatabaseName("ix_movimiento_aves_lote_destino_id");

                    b.HasIndex("LoteOrigenId")
                        .HasDatabaseName("ix_movimiento_aves_lote_origen_id");

                    b.HasIndex("NumeroMovimiento")
                        .IsUnique()
                        .HasDatabaseName("uq_movimiento_aves_numero_movimiento");

                    b.HasIndex("TipoMovimiento")
                        .HasDatabaseName("ix_movimiento_aves_tipo_movimiento");

                    b.HasIndex("UsuarioMovimientoId")
                        .HasDatabaseName("ix_movimiento_aves_usuario_movimiento_id");

                    b.HasIndex("GranjaOrigenId", "GranjaDestinoId")
                        .HasDatabaseName("ix_movimiento_aves_granjas");

                    b.ToTable("movimiento_aves", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Municipio", b =>
                {
                    b.Property<int>("MunicipioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("municipio_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MunicipioId"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id");

                    b.Property<int?>("DepartamentoId1")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id1");

                    b.Property<string>("MunicipioNombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("nombre");

                    b.HasKey("MunicipioId")
                        .HasName("pk_municipios");

                    b.HasIndex("DepartamentoId1")
                        .HasDatabaseName("ix_municipios_departamento_id1");

                    b.HasIndex("DepartamentoId", "MunicipioNombre")
                        .HasDatabaseName("ix_municipios_dep_nombre");

                    b.ToTable("municipios", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Nucleo", b =>
                {
                    b.Property<string>("NucleoId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("nucleo_id");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("NucleoNombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nucleo_nombre");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("NucleoId", "GranjaId")
                        .HasName("ak_nucleos_nucleo_id_granja_id");

                    b.HasIndex("GranjaId", "NucleoNombre")
                        .HasDatabaseName("ix_nucleo_granja_nombre");

                    b.ToTable("nucleos", "public");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pais_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaisId"));

                    b.Property<string>("PaisNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("pais_nombre");

                    b.HasKey("PaisId")
                        .HasName("pk_paises");

                    b.ToTable("paises", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("key");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_key");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.PlanGramajeGalpon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("GalponId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("galpon_id");

                    b.Property<double>("GramajeGrPorAve")
                        .HasPrecision(12, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("gramaje_gr_por_ave");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observaciones");

                    b.Property<int>("SemanaDesde")
                        .HasColumnType("integer")
                        .HasColumnName("semana_desde");

                    b.Property<int>("SemanaHasta")
                        .HasColumnType("integer")
                        .HasColumnName("semana_hasta");

                    b.Property<string>("TipoAlimento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_alimento");

                    b.Property<bool>("Vigente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("vigente");

                    b.HasKey("Id")
                        .HasName("pk_plan_gramaje_galpon");

                    b.HasIndex("GalponId")
                        .HasDatabaseName("ix_plan_gramaje_galpon_galpon_id");

                    b.ToTable("plan_gramaje_galpon", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.ProduccionAvicolaRaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnioGuia")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("anio_guia");

                    b.Property<string>("Apareo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("apareo");

                    b.Property<string>("AprovAc")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("aprov_ac");

                    b.Property<string>("AprovSem")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("aprov_sem");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("ConsAcH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cons_ac_h");

                    b.Property<string>("ConsAcM")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cons_ac_m");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Edad")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("edad");

                    b.Property<string>("GrAveDiaH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gr_ave_dia_h");

                    b.Property<string>("GrAveDiaM")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gr_ave_dia_m");

                    b.Property<string>("GrHuevoInc")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gr_huevo_inc");

                    b.Property<string>("GrHuevoT")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gr_huevo_t");

                    b.Property<string>("GrPollito")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gr_pollito");

                    b.Property<string>("GrasaPorcentaje")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("grasa_porcentaje");

                    b.Property<string>("HIncAa")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("h_inc_aa");

                    b.Property<string>("HTotalAa")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("h_total_aa");

                    b.Property<string>("KcalAveDiaH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("kcal_ave_dia_h");

                    b.Property<string>("KcalAveDiaM")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("kcal_ave_dia_m");

                    b.Property<string>("MasaHuevo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("masa_huevo");

                    b.Property<string>("MortSemH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mort_sem_h");

                    b.Property<string>("MortSemM")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mort_sem_m");

                    b.Property<string>("NacimPorcentaje")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nacim_porcentaje");

                    b.Property<string>("PesoH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("peso_h");

                    b.Property<string>("PesoHuevo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("peso_huevo");

                    b.Property<string>("PesoM")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("peso_m");

                    b.Property<string>("PesoMh")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("peso_mh");

                    b.Property<string>("PollitoAa")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pollito_aa");

                    b.Property<string>("ProdPorcentaje")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prod_porcentaje");

                    b.Property<string>("Raza")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("raza");

                    b.Property<string>("RetiroAcH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("retiro_ac_h");

                    b.Property<string>("RetiroAcM")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("retiro_ac_m");

                    b.Property<string>("Uniformidad")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("uniformidad");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.Property<string>("Valor1000")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("valor_1000");

                    b.Property<string>("Valor150")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("valor_150");

                    b.HasKey("Id")
                        .HasName("pk_produccion_avicola_raw");

                    b.HasIndex("AnioGuia")
                        .HasDatabaseName("ix_produccion_avicola_raw_anio_guia");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_produccion_avicola_raw_company_id");

                    b.HasIndex("Raza")
                        .HasDatabaseName("ix_produccion_avicola_raw_raza");

                    b.ToTable("produccion_avicola_raw", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.ProduccionDiaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("ConsKgH")
                        .HasColumnType("double precision")
                        .HasColumnName("cons_kg_h");

                    b.Property<double>("ConsKgM")
                        .HasColumnType("double precision")
                        .HasColumnName("cons_kg_m");

                    b.Property<int>("Etapa")
                        .HasColumnType("integer")
                        .HasColumnName("etapa");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_registro");

                    b.Property<int>("HuevoInc")
                        .HasColumnType("integer")
                        .HasColumnName("huevo_inc");

                    b.Property<int>("HuevoTot")
                        .HasColumnType("integer")
                        .HasColumnName("huevo_tot");

                    b.Property<string>("LoteId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lote_id");

                    b.Property<int?>("LoteProduccionId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_produccion_id");

                    b.Property<int>("MortalidadHembras")
                        .HasColumnType("integer")
                        .HasColumnName("mortalidad_hembras");

                    b.Property<int>("MortalidadMachos")
                        .HasColumnType("integer")
                        .HasColumnName("mortalidad_machos");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.Property<double?>("PesoHuevo")
                        .HasColumnType("double precision")
                        .HasColumnName("peso_huevo");

                    b.Property<int>("SelH")
                        .HasColumnType("integer")
                        .HasColumnName("sel_h");

                    b.Property<string>("TipoAlimento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_alimento");

                    b.HasKey("Id")
                        .HasName("pk_produccion_diaria");

                    b.HasIndex("LoteProduccionId")
                        .HasDatabaseName("ix_produccion_diaria_lote_produccion_id");

                    b.ToTable("produccion_diaria", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.ProduccionLote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciclo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Normal")
                        .HasColumnName("ciclo");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("FechaInicioProduccion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_inicio_produccion");

                    b.Property<string>("GalponId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("galpon_id");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_id");

                    b.Property<int>("HembrasIniciales")
                        .HasColumnType("integer")
                        .HasColumnName("hembras_iniciales");

                    b.Property<int>("HuevosIniciales")
                        .HasColumnType("integer")
                        .HasColumnName("huevos_iniciales");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    b.Property<int>("MachosIniciales")
                        .HasColumnType("integer")
                        .HasColumnName("machos_iniciales");

                    b.Property<string>("NucleoId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nucleo_id");

                    b.Property<string>("TipoNido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_nido");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id")
                        .HasName("pk_produccion_lotes");

                    b.HasIndex("GalponId")
                        .HasDatabaseName("ix_produccion_lotes_galpon_id");

                    b.HasIndex("LoteId")
                        .HasDatabaseName("ix_produccion_lotes_lote_id");

                    b.HasIndex("NucleoId", "GranjaId")
                        .HasDatabaseName("ix_produccion_lotes_nucleo_id_granja_id");

                    b.ToTable("produccion_lotes", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.ProduccionResultadoLevante", b =>
                {
                    b.Property<double?>("AcConsKgH")
                        .HasColumnType("double precision")
                        .HasColumnName("ac_cons_kg_h");

                    b.Property<double?>("AcConsKgM")
                        .HasColumnType("double precision")
                        .HasColumnName("ac_cons_kg_m");

                    b.Property<int>("AcErrH")
                        .HasColumnType("integer")
                        .HasColumnName("ac_err_h");

                    b.Property<int>("AcErrM")
                        .HasColumnType("integer")
                        .HasColumnName("ac_err_m");

                    b.Property<int>("AcMortH")
                        .HasColumnType("integer")
                        .HasColumnName("ac_mort_h");

                    b.Property<int>("AcMortM")
                        .HasColumnType("integer")
                        .HasColumnName("ac_mort_m");

                    b.Property<int>("AcSelH")
                        .HasColumnType("integer")
                        .HasColumnName("ac_sel_h");

                    b.Property<int>("AcSelM")
                        .HasColumnType("integer")
                        .HasColumnName("ac_sel_m");

                    b.Property<string>("AlimentoHGuia")
                        .HasColumnType("text")
                        .HasColumnName("alimento_h_guia");

                    b.Property<string>("AlimentoMGuia")
                        .HasColumnType("text")
                        .HasColumnName("alimento_m_guia");

                    b.Property<double?>("ConsAcGrH")
                        .HasColumnType("double precision")
                        .HasColumnName("cons_ac_gr_h");

                    b.Property<double?>("ConsAcGrHGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("cons_ac_gr_h_guia");

                    b.Property<double?>("ConsAcGrM")
                        .HasColumnType("double precision")
                        .HasColumnName("cons_ac_gr_m");

                    b.Property<double?>("ConsAcGrMGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("cons_ac_gr_m_guia");

                    b.Property<double?>("ConsKgH")
                        .HasColumnType("double precision")
                        .HasColumnName("cons_kg_h");

                    b.Property<double?>("ConsKgM")
                        .HasColumnType("double precision")
                        .HasColumnName("cons_kg_m");

                    b.Property<double?>("CvH")
                        .HasColumnType("double precision")
                        .HasColumnName("cv_h");

                    b.Property<double?>("CvM")
                        .HasColumnType("double precision")
                        .HasColumnName("cv_m");

                    b.Property<double?>("DifConsHPct")
                        .HasColumnType("double precision")
                        .HasColumnName("dif_cons_h_pct");

                    b.Property<double?>("DifConsMPct")
                        .HasColumnType("double precision")
                        .HasColumnName("dif_cons_m_pct");

                    b.Property<double?>("DifPesoHPct")
                        .HasColumnType("double precision")
                        .HasColumnName("dif_peso_h_pct");

                    b.Property<double?>("DifPesoMPct")
                        .HasColumnType("double precision")
                        .HasColumnName("dif_peso_m_pct");

                    b.Property<int?>("EdadSemana")
                        .HasColumnType("integer")
                        .HasColumnName("edad_semana");

                    b.Property<int>("ErrH")
                        .HasColumnType("integer")
                        .HasColumnName("err_h");

                    b.Property<double?>("ErrHPct")
                        .HasColumnType("double precision")
                        .HasColumnName("err_h_pct");

                    b.Property<int>("ErrM")
                        .HasColumnType("integer")
                        .HasColumnName("err_m");

                    b.Property<double?>("ErrMPct")
                        .HasColumnType("double precision")
                        .HasColumnName("err_m_pct");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<double?>("GrAveDiaH")
                        .HasColumnType("double precision")
                        .HasColumnName("gr_ave_dia_h");

                    b.Property<double?>("GrAveDiaHGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("gr_ave_dia_h_guia");

                    b.Property<double?>("GrAveDiaM")
                        .HasColumnType("double precision")
                        .HasColumnName("gr_ave_dia_m");

                    b.Property<double?>("GrAveDiaMGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("gr_ave_dia_m_guia");

                    b.Property<int?>("HembraViva")
                        .HasColumnType("integer")
                        .HasColumnName("hembra_viva");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    b.Property<int?>("MachoVivo")
                        .HasColumnType("integer")
                        .HasColumnName("macho_vivo");

                    b.Property<int>("MortH")
                        .HasColumnType("integer")
                        .HasColumnName("mort_h");

                    b.Property<double?>("MortHPct")
                        .HasColumnType("double precision")
                        .HasColumnName("mort_h_pct");

                    b.Property<double?>("MortHPctGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("mort_h_pct_guia");

                    b.Property<int>("MortM")
                        .HasColumnType("integer")
                        .HasColumnName("mort_m");

                    b.Property<double?>("MortMPct")
                        .HasColumnType("double precision")
                        .HasColumnName("mort_m_pct");

                    b.Property<double?>("MortMPctGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("mort_m_pct_guia");

                    b.Property<int>("MsEhH")
                        .HasColumnType("integer")
                        .HasColumnName("ms_eh_h");

                    b.Property<int>("MsEmM")
                        .HasColumnType("integer")
                        .HasColumnName("ms_em_m");

                    b.Property<double?>("PesoH")
                        .HasColumnType("double precision")
                        .HasColumnName("peso_h");

                    b.Property<double?>("PesoHGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("peso_h_guia");

                    b.Property<double?>("PesoM")
                        .HasColumnType("double precision")
                        .HasColumnName("peso_m");

                    b.Property<double?>("PesoMGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("peso_m_guia");

                    b.Property<double?>("RelMHPct")
                        .HasColumnType("double precision")
                        .HasColumnName("rel_m_h_pct");

                    b.Property<double?>("RetiroHAcPct")
                        .HasColumnType("double precision")
                        .HasColumnName("retiro_h_ac_pct");

                    b.Property<double?>("RetiroHPct")
                        .HasColumnType("double precision")
                        .HasColumnName("retiro_h_pct");

                    b.Property<double?>("RetiroMAcPct")
                        .HasColumnType("double precision")
                        .HasColumnName("retiro_m_ac_pct");

                    b.Property<double?>("RetiroMPct")
                        .HasColumnType("double precision")
                        .HasColumnName("retiro_m_pct");

                    b.Property<int>("SelHOut")
                        .HasColumnType("integer")
                        .HasColumnName("sel_h_out");

                    b.Property<double?>("SelHPct")
                        .HasColumnType("double precision")
                        .HasColumnName("sel_h_pct");

                    b.Property<int>("SelMOut")
                        .HasColumnType("integer")
                        .HasColumnName("sel_m_out");

                    b.Property<double?>("SelMPct")
                        .HasColumnType("double precision")
                        .HasColumnName("sel_m_pct");

                    b.Property<double?>("UnifH")
                        .HasColumnType("double precision")
                        .HasColumnName("unif_h");

                    b.Property<double?>("UnifHGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("unif_h_guia");

                    b.Property<double?>("UnifM")
                        .HasColumnType("double precision")
                        .HasColumnName("unif_m");

                    b.Property<double?>("UnifMGuia")
                        .HasColumnType("double precision")
                        .HasColumnName("unif_m_guia");

                    b.ToTable("produccion_resultado_levante", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Regional", b =>
                {
                    b.Property<int>("RegionalCia")
                        .HasColumnType("integer")
                        .HasColumnName("regional_cia");

                    b.Property<int>("RegionalId")
                        .HasColumnType("integer")
                        .HasColumnName("regional_id");

                    b.Property<string>("RegionalCodigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("regional_codigo");

                    b.Property<string>("RegionalEstado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("regional_estado");

                    b.Property<string>("RegionalNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("regional_nombre");

                    b.HasKey("RegionalCia", "RegionalId")
                        .HasName("pk_regionales");

                    b.ToTable("regionales", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.RoleCompany", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.HasKey("RoleId", "CompanyId")
                        .HasName("pk_role_companies");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_role_companies_company_id");

                    b.ToTable("role_companies", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id");

                    b.HasKey("RoleId", "MenuId")
                        .HasName("pk_role_menus");

                    b.HasIndex("MenuId")
                        .HasDatabaseName("ix_role_menus_menu_id");

                    b.ToTable("role_menus", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.SeguimientoLoteLevante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciclo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Normal")
                        .HasColumnName("ciclo");

                    b.Property<double>("ConsumoKgHembras")
                        .HasPrecision(12, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("consumo_kg_hembras");

                    b.Property<double?>("ConsumoKgMachos")
                        .HasPrecision(12, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("consumo_kg_machos");

                    b.Property<double?>("CvH")
                        .HasPrecision(6, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("cv_h");

                    b.Property<double?>("CvM")
                        .HasPrecision(6, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("cv_m");

                    b.Property<int>("ErrorSexajeHembras")
                        .HasColumnType("integer")
                        .HasColumnName("error_sexaje_hembras");

                    b.Property<int>("ErrorSexajeMachos")
                        .HasColumnType("integer")
                        .HasColumnName("error_sexaje_machos");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_registro");

                    b.Property<double?>("KcalAlH")
                        .HasPrecision(12, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("kcal_al_h");

                    b.Property<double?>("KcalAveH")
                        .HasPrecision(12, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("kcal_ave_h");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    b.Property<int>("MortalidadHembras")
                        .HasColumnType("integer")
                        .HasColumnName("mortalidad_hembras");

                    b.Property<int>("MortalidadMachos")
                        .HasColumnType("integer")
                        .HasColumnName("mortalidad_machos");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observaciones");

                    b.Property<double?>("PesoPromH")
                        .HasPrecision(8, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("peso_prom_h");

                    b.Property<double?>("PesoPromM")
                        .HasPrecision(8, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("peso_prom_m");

                    b.Property<double?>("ProtAlH")
                        .HasPrecision(12, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("prot_al_h");

                    b.Property<double?>("ProtAveH")
                        .HasPrecision(12, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("prot_ave_h");

                    b.Property<int>("SelH")
                        .HasColumnType("integer")
                        .HasColumnName("sel_h");

                    b.Property<int>("SelM")
                        .HasColumnType("integer")
                        .HasColumnName("sel_m");

                    b.Property<string>("TipoAlimento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_alimento");

                    b.Property<double?>("UniformidadH")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("uniformidad_h");

                    b.Property<double?>("UniformidadM")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("uniformidad_m");

                    b.HasKey("Id")
                        .HasName("pk_seguimiento_lote_levante");

                    b.HasIndex("LoteId")
                        .HasDatabaseName("ix_seguimiento_lote_levante_lote_id");

                    b.ToTable("seguimiento_lote_levante", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.SeguimientoProduccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ConsKgH")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)")
                        .HasColumnName("cons_kg_h");

                    b.Property<decimal>("ConsKgM")
                        .HasPrecision(12, 3)
                        .HasColumnType("numeric(12,3)")
                        .HasColumnName("cons_kg_m");

                    b.Property<int>("Etapa")
                        .HasColumnType("integer")
                        .HasColumnName("etapa");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha");

                    b.Property<int>("HuevoInc")
                        .HasColumnType("integer")
                        .HasColumnName("huevo_inc");

                    b.Property<int>("HuevoTot")
                        .HasColumnType("integer")
                        .HasColumnName("huevo_tot");

                    b.Property<int>("LoteId")
                        .HasColumnType("integer")
                        .HasColumnName("lote_id");

                    b.Property<int>("MortalidadH")
                        .HasColumnType("integer")
                        .HasColumnName("mortalidad_h");

                    b.Property<int>("MortalidadM")
                        .HasColumnType("integer")
                        .HasColumnName("mortalidad_m");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observaciones");

                    b.Property<decimal>("PesoHuevo")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("peso_huevo");

                    b.Property<int>("SelH")
                        .HasColumnType("integer")
                        .HasColumnName("sel_h");

                    b.Property<string>("TipoAlimento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tipo_alimento");

                    b.HasKey("Id")
                        .HasName("pk_seguimiento_produccion");

                    b.HasIndex("LoteId", "Fecha")
                        .IsUnique()
                        .HasDatabaseName("ix_seguimiento_produccion_lote_id_fecha");

                    b.ToTable("seguimiento_produccion", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("FailedAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("failed_attempts");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_locked");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_at");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("cedula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cedula");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("surName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sur_name");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telefono");

                    b.Property<string>("ubicacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ubicacion");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.UserCompany", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.HasKey("UserId", "CompanyId")
                        .HasName("pk_user_companies");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_user_companies_company_id");

                    b.ToTable("user_companies", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.UserFarm", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("FarmId")
                        .HasColumnType("integer")
                        .HasColumnName("farm_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.HasKey("UserId", "FarmId")
                        .HasName("pk_user_farms");

                    b.HasIndex("FarmId")
                        .HasDatabaseName("ix_user_farms_farm_id");

                    b.HasIndex("IsDefault")
                        .HasDatabaseName("ix_user_farms_is_default");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_farms_user_id");

                    b.HasIndex("UserId", "FarmId")
                        .IsUnique()
                        .HasDatabaseName("ux_user_farms_user_farm");

                    b.ToTable("user_farms", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("LoginId")
                        .HasColumnType("uuid")
                        .HasColumnName("login_id");

                    b.Property<bool>("IsLockedByAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked_by_admin");

                    b.Property<string>("LockReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("lock_reason");

                    b.HasKey("UserId", "LoginId")
                        .HasName("pk_user_logins");

                    b.HasIndex("LoginId")
                        .HasDatabaseName("ix_user_logins_login_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_user_roles_company_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Zona", b =>
                {
                    b.Property<int>("ZonaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("zona_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ZonaId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<int>("ZonaCia")
                        .HasColumnType("integer")
                        .HasColumnName("zona_cia");

                    b.Property<string>("ZonaEstado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zona_estado");

                    b.Property<string>("ZonaNombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zona_nombre");

                    b.HasKey("ZonaId")
                        .HasName("pk_zonas");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_zonas_company_id");

                    b.ToTable("zonas", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Departamento", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_departamentos_paises_pais_id");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Farm", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Company", null)
                        .WithMany("Farms")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_farms_companies_company_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Departamento", null)
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_farms_departamento");

                    b.HasOne("ZooSanMarino.Domain.Entities.Municipio", null)
                        .WithMany()
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_farms_municipio");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.FarmInventoryMovement", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.CatalogItem", "CatalogItem")
                        .WithMany()
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_farm_inventory_movements_catalog_items_catalog_item_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_farm_inventory_movements_farms_farm_id");

                    b.Navigation("CatalogItem");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.FarmProductInventory", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.CatalogItem", "CatalogItem")
                        .WithMany()
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_farm_product_inventory_catalog_items_catalog_item_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_farm_product_inventory_farms_farm_id");

                    b.Navigation("CatalogItem");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Galpon", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_galpones_companies_company_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Farm")
                        .WithMany("Galpones")
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_galpones_farms_granja_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Nucleo", "Nucleo")
                        .WithMany("Galpones")
                        .HasForeignKey("NucleoId", "GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_galpones_nucleos_nucleo_id_granja_id");

                    b.Navigation("Company");

                    b.Navigation("Farm");

                    b.Navigation("Nucleo");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.HistorialInventario", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Galpon", "Galpon")
                        .WithMany()
                        .HasForeignKey("GalponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_historial_inventario_galpon_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Granja")
                        .WithMany()
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_historial_inventario_granja_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.InventarioAves", "Inventario")
                        .WithMany()
                        .HasForeignKey("InventarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_historial_inventario_inventario_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_historial_inventario_lote_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.MovimientoAves", "Movimiento")
                        .WithMany()
                        .HasForeignKey("MovimientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_historial_inventario_movimiento_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Nucleo", "Nucleo")
                        .WithMany()
                        .HasForeignKey("NucleoId", "GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_historial_inventario_nucleo_id_granja_id");

                    b.Navigation("Galpon");

                    b.Navigation("Granja");

                    b.Navigation("Inventario");

                    b.Navigation("Lote");

                    b.Navigation("Movimiento");

                    b.Navigation("Nucleo");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.InventarioAves", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Galpon", "Galpon")
                        .WithMany()
                        .HasForeignKey("GalponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_inventario_aves_galpones_galpon_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Granja")
                        .WithMany()
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_inventario_aves_farms_granja_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_inventario_aves_lotes_lote_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Nucleo", "Nucleo")
                        .WithMany()
                        .HasForeignKey("NucleoId", "GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_inventario_aves_nucleos_nucleo_id_granja_id");

                    b.Navigation("Galpon");

                    b.Navigation("Granja");

                    b.Navigation("Lote");

                    b.Navigation("Nucleo");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Lote", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Galpon", "Galpon")
                        .WithMany()
                        .HasForeignKey("GalponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_lotes_galpones_galpon_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Farm")
                        .WithMany("Lotes")
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_lotes_farms_granja_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Nucleo", "Nucleo")
                        .WithMany("Lotes")
                        .HasForeignKey("NucleoId", "GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_lotes_nucleos_nucleo_id_granja_id");

                    b.Navigation("Farm");

                    b.Navigation("Galpon");

                    b.Navigation("Nucleo");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteGalpon", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Galpon", "Galpon")
                        .WithMany()
                        .HasForeignKey("GalponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_lote_galpones_galpones_galpon_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.LoteReproductora", "LoteReproductora")
                        .WithMany("LoteGalpones")
                        .HasForeignKey("LoteId", "ReproductoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lote_galpones_lote_reproductoras_lote_id_reproductora_id");

                    b.Navigation("Galpon");

                    b.Navigation("LoteReproductora");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteReproductora", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "Lote")
                        .WithMany("Reproductoras")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_lote_reproductoras_lotes_lote_id");

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteSeguimiento", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_lote_seguimientos_lotes_lote_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.LoteReproductora", "LoteReproductora")
                        .WithMany("LoteSeguimientos")
                        .HasForeignKey("LoteId", "ReproductoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lote_seguimientos_lote_reproductoras_lote_id_reproductora_id");

                    b.Navigation("Lote");

                    b.Navigation("LoteReproductora");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.MasterListOption", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.MasterList", "MasterList")
                        .WithMany("Options")
                        .HasForeignKey("MasterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_master_list_options_master_lists_master_list_id");

                    b.Navigation("MasterList");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Menu", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_menus_menus_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.MenuPermission", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Menu", "Menu")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_permissions_menus_menu_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Permission", "Permission")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_permissions_permissions_permission_id");

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.MovimientoAves", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "GranjaDestino")
                        .WithMany()
                        .HasForeignKey("GranjaDestinoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_movimiento_aves_granja_destino_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "GranjaOrigen")
                        .WithMany()
                        .HasForeignKey("GranjaOrigenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_movimiento_aves_granja_origen_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.InventarioAves", "InventarioDestino")
                        .WithMany("MovimientosDestino")
                        .HasForeignKey("InventarioDestinoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_movimiento_aves_inventario_destino_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.InventarioAves", "InventarioOrigen")
                        .WithMany("MovimientosOrigen")
                        .HasForeignKey("InventarioOrigenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_movimiento_aves_inventario_origen_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "LoteDestino")
                        .WithMany()
                        .HasForeignKey("LoteDestinoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_movimiento_aves_lote_destino_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "LoteOrigen")
                        .WithMany()
                        .HasForeignKey("LoteOrigenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_movimiento_aves_lote_origen_id");

                    b.Navigation("GranjaDestino");

                    b.Navigation("GranjaOrigen");

                    b.Navigation("InventarioDestino");

                    b.Navigation("InventarioOrigen");

                    b.Navigation("LoteDestino");

                    b.Navigation("LoteOrigen");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Municipio", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_municipios_departamento");

                    b.HasOne("ZooSanMarino.Domain.Entities.Departamento", null)
                        .WithMany("Municipios")
                        .HasForeignKey("DepartamentoId1")
                        .HasConstraintName("fk_municipios_departamentos_departamento_id1");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Nucleo", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Farm")
                        .WithMany("Nucleos")
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_nucleos_farms_granja_id");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.PlanGramajeGalpon", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Galpon", null)
                        .WithMany()
                        .HasForeignKey("GalponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_plan_gramaje_galpon_galpones_galpon_id");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.ProduccionDiaria", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.ProduccionLote", "LoteProduccion")
                        .WithMany()
                        .HasForeignKey("LoteProduccionId")
                        .HasConstraintName("fk_produccion_diaria_produccion_lotes_lote_produccion_id");

                    b.Navigation("LoteProduccion");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.ProduccionLote", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Galpon", "Galpon")
                        .WithMany()
                        .HasForeignKey("GalponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_produccion_lotes_galpones_galpon_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_produccion_lotes_lotes_lote_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Nucleo", "Nucleo")
                        .WithMany()
                        .HasForeignKey("NucleoId", "GranjaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_produccion_lotes_nucleos_nucleo_id_granja_id");

                    b.Navigation("Galpon");

                    b.Navigation("Lote");

                    b.Navigation("Nucleo");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Regional", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Company", "Company")
                        .WithMany("Regionales")
                        .HasForeignKey("RegionalCia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_regionales_companies_regional_cia");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.RoleCompany", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Company", "Company")
                        .WithMany("RoleCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_companies_companies_company_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Role", "Role")
                        .WithMany("RoleCompanies")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_companies_roles_role_id");

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_menus_menus_menu_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_menus_roles_role_id");

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.SeguimientoLoteLevante", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_seguimiento_lote_levante_lotes_lote_id");

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.SeguimientoProduccion", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_seguimiento_produccion_lotes_lote_id");

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.UserCompany", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Company", "Company")
                        .WithMany("UserCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_companies_companies_company_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.User", "User")
                        .WithMany("UserCompanies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_companies_users_user_id");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.UserFarm", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Farm")
                        .WithMany("UserFarms")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_farms_farms_farm_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.User", "User")
                        .WithMany("UserFarms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_farms_users_user_id");

                    b.Navigation("Farm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Login", "Login")
                        .WithMany("UserLogins")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_logins_login_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");

                    b.Navigation("Login");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_companies_company_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Company");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Zona", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Company", "Company")
                        .WithMany("Zonas")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_zonas_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Company", b =>
                {
                    b.Navigation("Farms");

                    b.Navigation("Regionales");

                    b.Navigation("RoleCompanies");

                    b.Navigation("UserCompanies");

                    b.Navigation("Zonas");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Farm", b =>
                {
                    b.Navigation("Galpones");

                    b.Navigation("Lotes");

                    b.Navigation("Nucleos");

                    b.Navigation("UserFarms");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.InventarioAves", b =>
                {
                    b.Navigation("MovimientosDestino");

                    b.Navigation("MovimientosOrigen");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Login", b =>
                {
                    b.Navigation("UserLogins");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Lote", b =>
                {
                    b.Navigation("Reproductoras");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteReproductora", b =>
                {
                    b.Navigation("LoteGalpones");

                    b.Navigation("LoteSeguimientos");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.MasterList", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("MenuPermissions");

                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Nucleo", b =>
                {
                    b.Navigation("Galpones");

                    b.Navigation("Lotes");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Permission", b =>
                {
                    b.Navigation("MenuPermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleCompanies");

                    b.Navigation("RoleMenus");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.User", b =>
                {
                    b.Navigation("UserCompanies");

                    b.Navigation("UserFarms");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
