using System.Text;
using System.Text.Json;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using Npgsql;
using NpgsqlTypes;
using ZooSanMarino.Application.DTOs.DbStudio;
using ZooSanMarino.Application.Interfaces;
using ZooSanMarino.Infrastructure.DbStudio;
using ZooSanMarino.Infrastructure.Persistence;
using static ZooSanMarino.Infrastructure.DbStudio.DbStudioCommon;

namespace ZooSanMarino.Infrastructure.Services;

public class DbSchemaService : IDbSchemaService
{
    private readonly string _connStr;
    private readonly IOptionsMonitor<DbStudioOptions> _opts;

    public DbSchemaService(IConfiguration cfg, IOptionsMonitor<DbStudioOptions> opts, ZooSanMarinoContext? ctx = null)
    {
        _connStr = ConnectionStringResolver.Resolve(cfg, ctx);
        _opts = opts;
    }

    public async Task CreateTableAsync(CreateTableDto dto, string actorUserId, CancellationToken ct)
    {
        EnsureEnabled();
        EnsureWritable(dto.Schema);
        EnsureValidIdent(dto.Schema, "Schema");
        EnsureValidIdent(dto.Table, "Table");

        if (dto.Columns is null || dto.Columns.Count == 0)
            throw new InvalidOperationException("Debe definir al menos una columna.");

        var sb = new StringBuilder();
        sb.Append("create table ").Append(QTable(dto.Schema, dto.Table)).Append(" (");

        var colDefs = new List<string>();
        foreach (var c in dto.Columns)
        {
            EnsureValidIdent(c.Name, "Column");
            if (string.IsNullOrWhiteSpace(c.Type))
                throw new InvalidOperationException($"Tipo inválido para columna {c.Name}");

            var def = new StringBuilder().Append(QI(c.Name)).Append(' ').Append(c.Type);
            if (!string.IsNullOrEmpty(c.Identity))
            {
                var idopt = c.Identity!.ToLowerInvariant() switch
                {
                    "always"     => "generated always as identity",
                    "by_default" => "generated by default as identity",
                    _            => throw new InvalidOperationException("Identity debe ser 'always' o 'by_default'")
                };
                def.Append(' ').Append(idopt);
            }
            if (!c.Nullable) def.Append(" not null");
            if (!string.IsNullOrWhiteSpace(c.Default)) def.Append(" default ").Append(c.Default);
            colDefs.Add(def.ToString());
        }

        if (dto.PrimaryKey is { Count: > 0 })
        {
            foreach (var pkc in dto.PrimaryKey) EnsureValidIdent(pkc, "PK column");
            colDefs.Add($"primary key ({string.Join(",", dto.PrimaryKey.Select(QI))})");
        }

        sb.Append(string.Join(", ", colDefs)).Append(");");

        if (dto.Uniques is not null)
        {
            foreach (var ux in dto.Uniques.Where(u => u is { Count: > 0 }))
            {
                foreach (var c in ux) EnsureValidIdent(c, "Unique column");
                var uxName = $"ux_{dto.Table}_{string.Join("_", ux)}";
                sb.AppendLine().Append("create unique index ").Append(QI(uxName))
                  .Append(" on ").Append(QTable(dto.Schema, dto.Table))
                  .Append(" (").Append(string.Join(",", ux.Select(QI))).Append(");");
            }
        }

        await ExecuteDdlWithAuditAsync("CREATE_TABLE", dto.Schema, dto.Table, sb.ToString(), actorUserId, ct);
    }

    public async Task AddColumnAsync(string schema, string table, AddColumnDto dto, string actorUserId, CancellationToken ct)
    {
        EnsureEnabled(); EnsureWritable(schema);
        EnsureValidIdent(schema, "Schema"); EnsureValidIdent(table, "Table");
        EnsureValidIdent(dto.Name, "Column");
        if (string.IsNullOrWhiteSpace(dto.Type)) throw new InvalidOperationException("Tipo requerido.");

        var sql = new StringBuilder()
            .Append("alter table ").Append(QTable(schema, table))
            .Append(" add column ").Append(QI(dto.Name)).Append(' ').Append(dto.Type);

        if (!dto.Nullable) sql.Append(" not null");
        if (!string.IsNullOrWhiteSpace(dto.Default)) sql.Append(" default ").Append(dto.Default);
        sql.Append(';');

        await ExecuteDdlWithAuditAsync("ADD_COLUMN", schema, table, sql.ToString(), actorUserId, ct);
    }

    public async Task AlterColumnAsync(string schema, string table, string column, AlterColumnDto dto, string actorUserId, CancellationToken ct)
    {
        EnsureEnabled(); EnsureWritable(schema);
        EnsureValidIdent(schema, "Schema"); EnsureValidIdent(table, "Table"); EnsureValidIdent(column, "Column");

        var sb = new StringBuilder();
        var qtable = QTable(schema, table);

        if (!string.IsNullOrWhiteSpace(dto.NewType))
            sb.Append("alter table ").Append(qtable).Append(" alter column ").Append(QI(column))
              .Append(" type ").Append(dto.NewType).Append(" using ").Append(QI(column)).Append("::").Append(dto.NewType).Append(';');

        if (dto.SetNotNull == true)
            sb.Append("alter table ").Append(qtable).Append(" alter column ").Append(QI(column)).Append(" set not null;");
        if (dto.DropNotNull == true)
            sb.Append("alter table ").Append(qtable).Append(" alter column ").Append(QI(column)).Append(" drop not null;");

        if (!string.IsNullOrWhiteSpace(dto.SetDefault))
            sb.Append("alter table ").Append(qtable).Append(" alter column ").Append(QI(column)).Append(" set default ").Append(dto.SetDefault).Append(';');
        if (dto.DropDefault == true)
            sb.Append("alter table ").Append(qtable).Append(" alter column ").Append(QI(column)).Append(" drop default;");

        if (sb.Length == 0) throw new InvalidOperationException("Nada para alterar.");
        await ExecuteDdlWithAuditAsync("ALTER_COLUMN", schema, table, sb.ToString(), actorUserId, ct);
    }

    public async Task DropColumnAsync(string schema, string table, string column, string actorUserId, CancellationToken ct)
    {
        EnsureEnabled(); EnsureWritable(schema);
        EnsureValidIdent(schema, "Schema"); EnsureValidIdent(table, "Table"); EnsureValidIdent(column, "Column");

        var sql = $"alter table {QTable(schema, table)} drop column {QI(column)};";
        await ExecuteDdlWithAuditAsync("DROP_COLUMN", schema, table, sql, actorUserId, ct);
    }

    // ===== Helpers =====

    private async Task ExecuteDdlWithAuditAsync(string action, string? schema, string? table, string sql, string actor, CancellationToken ct)
    {
        await using var conn = new NpgsqlConnection(_connStr);
        await conn.OpenAsync(ct);
        await using var tx = await conn.BeginTransactionAsync(ct);
        try
        {
            await using (var cmd = new NpgsqlCommand(sql, conn, tx))
                await cmd.ExecuteNonQueryAsync(ct);

            await InsertAuditAsync(conn, tx, action, schema, table, sql, new { error = (string?)null }, actor, ct);
            await tx.CommitAsync(ct);
        }
        catch (Exception ex)
        {
            await tx.RollbackAsync(ct);
            // intenta registrar el error fuera de la transacción de DDL
            await using var conn2 = new NpgsqlConnection(_connStr);
            await conn2.OpenAsync(ct);
            await InsertAuditAsync(conn2, null, action, schema, table, sql, new { error = ex.Message }, actor, ct);
            throw new InvalidOperationException($"Error ejecutando {action}: {ex.Message}", ex);
        }
    }

    private static async Task InsertAuditAsync(NpgsqlConnection conn, NpgsqlTransaction? tx, string action, string? schema, string? table, string sql, object summary, string actor, CancellationToken ct)
    {
        const string auditSql = @"insert into public.dbstudio_audit
                                  (action, schema_name, table_name, sql_text, result_summary, actor_user_id)
                                  values ($1,$2,$3,$4,$5::jsonb,$6);";

        await using var cmd = new NpgsqlCommand(auditSql, conn, tx);
        cmd.Parameters.AddWithValue(action);
        cmd.Parameters.AddWithValue((object?)schema ?? DBNull.Value);
        cmd.Parameters.AddWithValue((object?)table ?? DBNull.Value);
        cmd.Parameters.AddWithValue(sql);
        cmd.Parameters.AddWithValue(NpgsqlDbType.Jsonb, JsonSerializer.Serialize(summary));
        cmd.Parameters.AddWithValue(actor);
        await cmd.ExecuteNonQueryAsync(ct);
    }

    private void EnsureEnabled()
    {
        if (!_opts.CurrentValue.Enabled)
            throw new InvalidOperationException("DB Studio deshabilitado por configuración.");
    }
    private void EnsureWritable(string schema)
    {
        var ws = _opts.CurrentValue.WritableSchemas ?? Array.Empty<string>();
        if (!ws.Contains(schema, StringComparer.Ordinal))
            throw new InvalidOperationException($"Schema '{schema}' no habilitado para escritura.");
    }
}

public class DbStudioOptions
{
    public bool Enabled { get; set; } = false;
    public string[]? WritableSchemas { get; set; }
    public int SelectMaxLimit { get; set; } = 500;
}
